<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:security="http://www.springframework.org/schema/security"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security.xsd">


	<!--开启spring security注解-->
	<!--开启JSR-250注解-->
	<!--<security:global-method-security jsr250-annotations="enabled"/>-->

	<!--开启@Secured注解-->
	<!--<security:global-method-security secured-annotations="enabled"/>-->

	<!--开启表达式注解-->
	<!--<security:global-method-security pre-post-annotations="enabled"/>-->


	<!-- 配置不拦截的资源 -->
	<security:http pattern="/login.jsp" security="none"/>
	<security:http pattern="/failer.jsp" security="none"/>
	<security:http pattern="/css/**" security="none"/>
	<security:http pattern="/img/**" security="none"/>
	<security:http pattern="/plugins/**" security="none"/>

	<!--放开controller请求路径-->
	<security:http pattern="/product" security="none"></security:http>
	<security:http pattern="/orders" security="none"></security:http>
	<security:http pattern="/user" security="none"></security:http>

	<!--
        配置具体的规则
        auto-config="true"	不用自己编写登录的页面，框架提供默认登录页面  是否开启自动配置
        use-expressions="false"	是否使用SPEL表达式（没学习过）  如果页面使用了表达式则设置为true
    -->
	<security:http auto-config="true" use-expressions="true">
		<!-- 配置具体的拦截的规则 pattern="请求路径的规则" access="访问系统的人，必须有ROLE_USER的角色" :角色名称 必须以ROLE_开头-->
		<!-- /* 拦截一级目录  /**拦截目录及其子目录下的所有路径
		-->
		<security:intercept-url pattern="/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')"/>

		<!-- 定义跳转的具体的页面 -->
		<security:form-login
				login-page="/login.jsp"
				login-processing-url="/login"
				default-target-url="/index.jsp"
				authentication-failure-url="/failer.jsp"
				authentication-success-forward-url="/pages/main.jsp"
		/>

		<!-- 关闭跨域请求 -->
		<!--禁用跨服务器资源拦截-->
		<security:csrf disabled="true"/>

		<!-- 退出 -->
		<security:logout invalidate-session="true" logout-url="/logout" logout-success-url="/login.jsp" />

	</security:http>

	<!-- 切换成数据库中的用户名和密码 -->
	<!--配置认证管理-->
	<security:authentication-manager>
		<!--查询自己的数据库获取用户名和密码-->
		<security:authentication-provider user-service-ref="userService">
			 <!--配置加密的方式-->
			<!--配置密码加密器-->
			<security:password-encoder ref="passwordEncoder"/>

		</security:authentication-provider>
	</security:authentication-manager>

	 <!--配置加密类-->
	<!--密文加密器-->
	<bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

	<!-- 提供了入门的方式，在内存中存入用户名和密码
    <security:authentication-manager>
        <security:authentication-provider>
            <security:user-service>
                <security:user name="admin" password="{noop}admin" authorities="ROLE_USER"/>
            </security:user-service>
        </security:authentication-provider>
    </security:authentication-manager>
    -->

</beans>












